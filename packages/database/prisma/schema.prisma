generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens       VerificationToken[]
  subscriptions UserSubscription[]
}

model UserBalance {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Package {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  points      Int      @default(0)
  price       Float    @default(0)
  currency    String   @default("USD")
  interval    String   @default("month") // month, year
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions UserSubscription[]

  @@index([active])
}

model UserSubscription {
  id                  String   @id @default(cuid())
  userId              String
  packageId           String
  status              String   @default("active") // active, canceled, expired
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false)
  stripeSubscriptionId String? @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  package   Package  @relation(fields: [packageId], references: [id])

  @@index([userId])
  @@index([packageId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model StockOrderBatch {
  id          String           @id @default(cuid())
  userId      String
  status      String           @default("draft")
  totalPoints Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tasks       StockOrderTask[]

  @@index([userId])
}

model StockOrderTask {
  id             String           @id @default(cuid())
  userId         String
  batchId        String?
  sourceUrl      String
  site           String?
  assetId        String?
  title          String?
  previewUrl     String?
  thumbnailUrl   String?
  costPoints     Int?
  costCurrency   String?
  costAmount     Float?
  status         String           @default("draft")
  externalTaskId String?          @unique
  latestMessage  String?
  downloadUrl    String?
  responsetype   String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  batch          StockOrderBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([batchId])
}
