generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER PROFILE (Links to Supabase Auth)
// ============================================

model Profile {
  id            String   @id @db.Uuid // References auth.users(id) in Supabase
  email         String   @unique
  supabaseId    String   @unique @map("supabase_id") @db.Uuid // Same as id, for clarity
  
  // Profile information
  fullName      String?  @map("full_name")
  avatarUrl     String?  @map("avatar_url")
  
  // Account status & role
  role          String   @default("user") // "user", "admin"
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  
  // Credits system
  credits       Int      @default(0)
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLoginAt   DateTime? @map("last_login_at") @db.Timestamptz(6)
  
  // Relations
  balance           Balance?
  transactions      Transaction[]
  orders            Order[]
  packagePurchases  PackagePurchase[]
  subscriptions     Subscription[]
  payments          Payment[]
  downloads         Download[]
  assets            Asset[]
  
  @@index([email])
  @@index([supabaseId])
  @@map("profiles")
}

// ============================================
// BALANCE & CREDITS
// ============================================

model Balance {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  
  // Credits
  credits   Float    @default(0)
  currency  String   @default("USD")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("balances")
}

// ============================================
// SUBSCRIPTIONS
// ============================================

model Subscription {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  
  // Subscription details
  plan                String   // "free", "starter", "pro", "business"
  status              String   @default("active") // "active", "cancelled", "expired"
  credits             Int      @default(5) // Credits included per period
  
  // Billing
  billingCycle        Int      @default(1) @map("billing_cycle") // 1, 2, or 3 months
  monthlyPrice        Float    @default(0) @map("monthly_price") // Price per month
  totalPrice          Float    @default(0) @map("total_price") // Total price paid
  
  // Period tracking
  currentPeriodStart  DateTime @default(now()) @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd    DateTime @map("current_period_end") @db.Timestamptz(6)
  
  // Usage tracking
  downloadsUsed       Int      @default(0) @map("downloads_used")
  downloadsLimit      Int      @default(5) @map("downloads_limit")
  
  // Timestamps
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  profile             Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

// ============================================
// PAYMENTS
// ============================================

model Payment {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  subscriptionId  String?  @map("subscription_id") @db.Uuid
  
  // Payment details
  amount          Float
  currency        String   @default("USD")
  status          String   @default("pending") // "pending", "completed", "failed", "refunded"
  paymentMethod   String   @map("payment_method") // "card", "paypal", "simulation"
  
  // External references
  paymentId       String?  @map("payment_id") // Stripe/PayPal transaction ID
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  user            Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@map("payments")
}

// ============================================
// PACKAGES (Credit Packages)
// ============================================

model Package {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  
  // Package details
  name        String
  description String?
  credits     Float
  price       Float
  currency    String   @default("USD")
  
  // Features
  features    String[] // Array of feature strings
  
  // Status
  isActive    Boolean  @default(true) @map("is_active")
  isPopular   Boolean  @default(false) @map("is_popular")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  purchases   PackagePurchase[]
  
  @@index([isActive])
  @@map("packages")
}

model PackagePurchase {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String        @map("user_id") @db.Uuid
  packageId     String        @map("package_id") @db.Uuid
  
  // Purchase details
  creditsAdded  Float         @map("credits_added")
  amountPaid    Float         @map("amount_paid")
  currency      String        @default("USD")
  
  // Payment info
  paymentMethod String?       @map("payment_method") // stripe, paypal, etc.
  paymentId     String?       @map("payment_id") // External payment ID
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  
  // Timestamps
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user          Profile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  package       Package       @relation(fields: [packageId], references: [id])
  
  @@index([userId])
  @@index([packageId])
  @@index([paymentStatus])
  @@map("package_purchases")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ============================================
// TRANSACTIONS
// ============================================

model Transaction {
  id          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String          @map("user_id") @db.Uuid
  
  // Transaction details
  type        TransactionType
  amount      Float
  description String
  referenceId String?         @map("reference_id") // Link to order or purchase
  
  // Timestamps
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  user        Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

enum TransactionType {
  CREDIT_PURCHASE
  CREDIT_DEDUCTION
  REFUND
  BONUS
}

// ============================================
// ASSETS (Stock Media Catalog)
// ============================================

model Asset {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  
  // Asset details
  title          String
  description    String?
  category       String
  tags           String[]
  
  // File information
  fileUrl        String   @map("file_url")
  thumbnailUrl   String?  @map("thumbnail_url")
  fileSize       BigInt?  @map("file_size")
  fileType       String?  @map("file_type")
  
  // Stock site integration (NEHTW)
  stockSite      String?  @map("stock_site") // "envato", "freepik", etc.
  stockId        String?  @map("stock_id") // External stock site ID
  stockUrl       String?  @map("stock_url") // Original URL
  
  // Metrics
  downloadsCount Int      @default(0) @map("downloads_count")
  isPremium      Boolean  @default(false) @map("is_premium")
  cost           Float?   // Credit cost to download
  
  // Creator
  createdBy      String?  @map("created_by") @db.Uuid
  
  // Timestamps
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  creator        Profile? @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  orders         Order[]
  downloads      Download[]
  
  @@index([category])
  @@index([isPremium])
  @@index([stockSite])
  @@map("assets")
}

// ============================================
// ORDERS
// ============================================

model Order {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  assetId       String      @map("asset_id") @db.Uuid
  
  // NEHTW Integration
  taskId        String?     @unique @map("task_id") // NEHTW task_id
  
  // Order details
  orderStatus   String      @default("pending") @map("order_status") // "pending", "processing", "ready", "downloaded", "error", "expired"
  progress      Int         @default(0)
  amount        Decimal?    @db.Decimal(10, 2)
  cost          Float       // Credits deducted
  
  // Download information
  downloadUrl   String?     @map("download_url")
  expiresAt     DateTime?   @map("expires_at") @db.Timestamptz(6)
  downloadedAt  DateTime?   @map("downloaded_at") @db.Timestamptz(6)
  
  // Error tracking
  errorMessage  String?     @map("error_message")
  
  // Timestamps
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user          Profile     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset         Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  downloads     Download[]
  
  @@index([userId])
  @@index([assetId])
  @@index([taskId])
  @@index([orderStatus])
  @@index([createdAt])
  @@map("orders")
}

// ============================================
// DOWNLOADS
// ============================================

model Download {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  assetId      String    @map("asset_id") @db.Uuid
  orderId      String?   @map("order_id") @db.Uuid
  
  // Download details
  stockSite    String?   @map("stock_site")
  stockId      String?   @map("stock_id")
  title        String?
  thumbnail    String?
  downloadUrl  String?   @map("download_url")
  status       String    @default("processing") // "processing", "ready", "failed"
  
  // Credits tracking
  creditsUsed  Int       @map("credits_used")
  
  // Expiration
  expiresAt    DateTime  @map("expires_at") @db.Timestamptz(6)
  downloadedAt DateTime? @map("downloaded_at") @db.Timestamptz(6)
  
  // Timestamps
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  user         Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset        Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([assetId])
  @@index([orderId])
  @@index([status])
  @@map("downloads")
}
