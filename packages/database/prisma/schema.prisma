generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String        @unique
  password     String
  verified     Boolean       @default(false)
  balance      Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orders       Order[]
  batches      Batch[]
  transactions Transaction[]

  @@map("User")
}

model StockSite {
  id        String   @id @default(uuid())
  name      String   @unique
  price     Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("StockSite")
}

model Order {
  id           String   @id @default(uuid())
  userId       String
  batchId      String?
  taskId       String   @unique
  site         String
  stockId      String
  stockUrl     String
  status       String   @default("PROCESSING")
  cost         Int
  downloadLink String?
  fileName     String?
  errorMessage String?
  retryCount   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  batch Batch? @relation(fields: [batchId], references: [id])

  @@map("Order")
}

model Batch {
  id              String   @id @default(uuid())
  userId          String
  totalOrders     Int
  completedOrders Int      @default(0)
  failedOrders    Int      @default(0)
  totalCost       Int
  status          String   @default("PROCESSING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("Batch")
}

model Package {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  points      Int
  price       Float
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]

  @@map("Package")
}

model Transaction {
  id             String   @id @default(uuid())
  userId         String
  packageId      String
  amount         Float
  pointsReceived Int
  status         String   @default("pending")
  paymentMethod  String?
  paymentId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  @@map("Transaction")
}
