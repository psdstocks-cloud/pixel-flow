generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  supabaseId        String   @unique  // Link to Supabase auth.users.id
  
  // Profile
  fullName          String?
  avatarUrl         String?
  
  // Credits
  credits           Int      @default(0)
  
  // Account status
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  balance           Balance?
  transactions      Transaction[]
  orders            Order[]
  packagePurchases  PackagePurchase[]
  subscriptions     Subscription[]
  payments          Payment[]
  downloads         Download[]
  
  @@index([email])
  @@index([supabaseId])
}

// ===== BALANCE & CREDITS =====

model Balance {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Credits
  credits           Float    @default(0)
  currency          String   @default("USD")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// ===== SUBSCRIPTIONS (NEW) =====

model Subscription {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  
  plan          String   // "starter", "pro", "business"
  status        String   // "active", "cancelled", "expired"
  credits       Int      // Credits included per month
  
  billingCycle  Int      @default(1) @map("billing_cycle") // 1, 2, or 3 months
  monthlyPrice  Float    @map("monthly_price") // Price per month after increase
  totalPrice    Float    @map("total_price") // Total price paid
  
  startDate     DateTime @default(now()) @map("start_date")
  endDate       DateTime @map("end_date")
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@map("subscriptions")
}

// ===== PAYMENTS =====

model Payment {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id])
  subscriptionId  String?  @map("subscription_id")
  
  amount          Float
  currency        String   @default("USD")
  status          String   // "pending", "completed", "failed"
  paymentMethod   String   @map("payment_method") // "card", "paypal", "simulation"
  
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("payments")
}

// ===== PACKAGES =====

model Package {
  id                String   @id @default(cuid())
  
  // Package details
  name              String
  description       String?
  credits           Float
  price             Float
  currency          String   @default("USD")
  
  // Features
  features          String[] // Array of feature strings
  
  // Status
  isActive          Boolean  @default(true)
  isPopular         Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  purchases         PackagePurchase[]
  
  @@index([isActive])
}

model PackagePurchase {
  id                String   @id @default(cuid())
  userId            String
  packageId         String
  
  // Purchase details
  creditsAdded      Float
  amountPaid        Float
  currency          String   @default("USD")
  
  // Payment info
  paymentMethod     String?  // stripe, paypal, etc.
  paymentId         String?  // External payment ID
  paymentStatus     PaymentStatus @default(PENDING)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  package           Package  @relation(fields: [packageId], references: [id])
  
  @@index([userId])
  @@index([packageId])
  @@index([paymentStatus])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ===== TRANSACTIONS =====

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  
  // Transaction details
  type              TransactionType
  amount            Float
  description       String
  referenceId       String?  // Link to order or purchase
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum TransactionType {
  CREDIT_PURCHASE
  CREDIT_DEDUCTION
  REFUND
  BONUS
}

// ===== ORDERS =====

model Order {
  id                String   @id @default(cuid())
  userId            String
  
  // Order details
  taskId            String   @unique  // NEHTW task_id
  site              String
  stockId           String
  stockUrl          String?
  
  // Status
  status            OrderStatus @default(PENDING)
  progress          Int       @default(0)
  
  // Cost
  cost              Float
  
  // Download info
  downloadUrl       String?
  expiresAt         DateTime?
  downloadedAt      DateTime?
  
  // Error tracking
  errorMessage      String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([taskId])
  @@index([status])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  DOWNLOADED
  ERROR
  EXPIRED
}

// ===== DOWNLOADS =====

model Download {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  
  stockSite    String   @map("stock_site")
  stockId      String   @map("stock_id")
  title        String?
  thumbnail    String?
  downloadUrl  String?  @map("download_url")
  status       String   // "ready", "processing", "failed"
  creditsUsed  Int      @map("credits_used")
  
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@map("downloads")
}
